name: Continuous Integration

on:
  push:
    branches: 
      - main
      - develop
      - 'feature/*'
      - 'hotfix/*'
    paths:
      - 'src/backend/**'
      - 'src/web/**'
      - 'pom.xml'
      - 'package.json'
    tags:
      - 'v*.*.*'
  pull_request:
    branches: 
      - main
      - develop
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18.x'
  JAVA_VERSION: '17'
  DOCKER_REGISTRY: 'ghcr.io'
  CACHE_TTL: '24h'
  TEST_RETRY_COUNT: '3'
  BUILD_TIMEOUT: '30m'

jobs:
  build_backend:
    name: Build & Test Backend
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          lfs: true
          fetch-depth: 0

      - name: Setup Java Environment
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Setup Node.js Environment
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/backend/package-lock.json'

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.m2
          key: ${{ runner.os }}-backend-${{ hashFiles('**/package-lock.json', '**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-backend-

      - name: Install Dependencies
        run: |
          cd src/backend
          npm ci
          npm audit fix

      - name: Run Backend Tests
        run: |
          cd src/backend
          npm run test:coverage
        env:
          CI: true
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Upload Test Coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: src/backend/coverage
          flags: backend
          fail_ci_if_error: true

      - name: Build Docker Images
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug

      - name: Cache Docker Layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

  build_mobile:
    name: Build & Test Mobile App
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/web/package-lock.json'

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-mobile-${{ hashFiles('src/web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-mobile-

      - name: Install Dependencies
        run: |
          cd src/web
          npm ci
          npm audit fix

      - name: Type Check
        run: |
          cd src/web
          npm run type-check

      - name: Run Mobile Tests
        run: |
          cd src/web
          npm run test
        env:
          CI: true

      - name: Upload Test Coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: src/web/coverage
          flags: mobile
          fail_ci_if_error: true

  code_quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build_backend, build_mobile]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v1
        with:
          args: >
            -Dsonar.projectKey=fpbe-mobile-banking
            -Dsonar.sources=src
            -Dsonar.tests=src/**/tests
            -Dsonar.test.inclusions=**/*.test.ts,**/*.test.tsx
            -Dsonar.coverage.exclusions=**/*.test.*,**/*.spec.*
            -Dsonar.javascript.lcov.reportPaths=src/*/coverage/lcov.info
            -Dsonar.qualitygate.wait=true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Security Scan
        run: |
          cd src/backend && npm audit
          cd ../web && npm audit
        continue-on-error: false

      - name: Quality Gate Check
        run: |
          if [ "${{ job.status }}" != "success" ]; then
            echo "Quality gates failed!"
            exit 1
          fi

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true