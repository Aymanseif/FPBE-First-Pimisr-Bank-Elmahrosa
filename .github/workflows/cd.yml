name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
    branches:
      - main
      - develop

env:
  AWS_REGION: us-east-1
  DOCKER_REGISTRY: ghcr.io
  STAGING_NAMESPACE: fpbe-staging
  PRODUCTION_NAMESPACE: fpbe-production
  SECURITY_SCAN_THRESHOLD: high
  DEPLOYMENT_TIMEOUT: 10m

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate Version
        id: version
        run: |
          echo "version=$(git describe --tags --always)" >> $GITHUB_OUTPUT

  security-scan:
    name: Security Scan
    needs: prepare
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@v0.10.0
        with:
          scan-type: 'fs,config'
          severity: 'CRITICAL,HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true

      - name: Upload Scan Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    needs: [prepare, security-scan]
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Deploy Blue Environment
        run: |
          helm upgrade --install fpbe-blue ./infrastructure/helm/api-gateway \
            --namespace ${{ env.STAGING_NAMESPACE }} \
            --set image.tag=${{ needs.prepare.outputs.version }} \
            --set deployment.strategy=blue-green \
            --set environment=staging \
            --values ./infrastructure/helm/api-gateway/values.yaml \
            --timeout ${{ env.DEPLOYMENT_TIMEOUT }} \
            --wait

      - name: Run Health Checks
        run: |
          kubectl wait --for=condition=available deployment/fpbe-blue \
            --namespace ${{ env.STAGING_NAMESPACE }} \
            --timeout=${{ env.DEPLOYMENT_TIMEOUT }}

      - name: Switch Traffic
        if: success()
        run: |
          kubectl patch service api-gateway \
            --namespace ${{ env.STAGING_NAMESPACE }} \
            --patch '{"spec":{"selector":{"deployment":"blue"}}}'

      - name: Cleanup Green Environment
        if: success()
        run: |
          helm uninstall fpbe-green --namespace ${{ env.STAGING_NAMESPACE }} || true

  deploy-production:
    name: Deploy to Production
    needs: [prepare, deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Deploy Canary
        run: |
          helm upgrade --install fpbe-canary ./infrastructure/helm/api-gateway \
            --namespace ${{ env.PRODUCTION_NAMESPACE }} \
            --set image.tag=${{ needs.prepare.outputs.version }} \
            --set deployment.strategy=canary \
            --set canary.weight=10 \
            --set environment=production \
            --values ./infrastructure/helm/api-gateway/values.yaml \
            --timeout ${{ env.DEPLOYMENT_TIMEOUT }} \
            --wait

      - name: Monitor Canary
        run: |
          for i in {1..12}; do
            sleep 300
            if [[ $(kubectl get deploy fpbe-canary -n ${{ env.PRODUCTION_NAMESPACE }} \
              -o jsonpath='{.status.conditions[?(@.type=="Available")].status}') != "True" ]]; then
              echo "Canary deployment failed"
              exit 1
            fi
          done

      - name: Complete Rollout
        if: success()
        run: |
          helm upgrade --install fpbe ./infrastructure/helm/api-gateway \
            --namespace ${{ env.PRODUCTION_NAMESPACE }} \
            --set image.tag=${{ needs.prepare.outputs.version }} \
            --set deployment.strategy=rolling \
            --set environment=production \
            --values ./infrastructure/helm/api-gateway/values.yaml \
            --timeout ${{ env.DEPLOYMENT_TIMEOUT }} \
            --wait

      - name: Cleanup Canary
        if: always()
        run: |
          helm uninstall fpbe-canary --namespace ${{ env.PRODUCTION_NAMESPACE }} || true

  notify:
    name: Send Notifications
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}