syntax = "proto3";

package com.fpbe.proto.auth;

import "google/protobuf/timestamp.proto";  // v3.0.0
import "google/protobuf/empty.proto";      // v3.0.0
import "account.proto";                    // Internal import for account references

option java_multiple_files = true;
option java_package = "com.fpbe.proto.auth";
option java_outer_classname = "AuthProto";

// User represents a comprehensive user profile with security and audit features
message User {
    string id = 1;                                 // Unique user identifier
    string email = 2;                             // User email address
    string phone_number = 3;                      // Verified phone number
    string password_hash = 4;                     // Securely hashed password
    string kyc_status = 5;                        // KYC verification status
    map<string, string> profile = 6;              // Additional profile attributes
    repeated string device_ids = 7;               // Registered device identifiers
    int32 version = 8;                            // Optimistic locking version
    google.protobuf.Timestamp created_at = 9;     // Account creation timestamp
    google.protobuf.Timestamp updated_at = 10;    // Last update timestamp
    google.protobuf.Timestamp last_login = 11;    // Last successful login
    int32 failed_attempts = 12;                   // Failed login attempt counter
    string security_status = 13;                  // Current security status
}

// LoginRequest contains enhanced security parameters for authentication
message LoginRequest {
    string email = 1;                             // User email
    string password = 2;                          // Password (transmitted securely)
    string device_id = 3;                         // Unique device identifier
    string ip_address = 4;                        // Client IP address
    map<string, string> device_info = 5;          // Device metadata
    string app_version = 6;                       // Client application version
}

// LoginResponse contains comprehensive session and security information
message LoginResponse {
    string access_token = 1;                      // JWT access token
    string refresh_token = 2;                     // Refresh token for session extension
    int64 token_expiry = 3;                       // Token expiration timestamp
    User user = 4;                                // User profile information
    string session_id = 5;                        // Unique session identifier
    map<string, string> security_context = 6;     // Additional security metadata
}

// BiometricAuthRequest for biometric authentication
message BiometricAuthRequest {
    string device_id = 1;                         // Device identifier
    bytes biometric_data = 2;                     // Encrypted biometric data
    string biometric_type = 3;                    // Type (FINGERPRINT, FACE_ID)
    map<string, string> device_info = 4;          // Device security context
}

// ValidateTokenRequest for token validation
message ValidateTokenRequest {
    string token = 1;                             // Token to validate
    string device_id = 2;                         // Device identifier
    string ip_address = 3;                        // Client IP address
}

// RefreshTokenRequest for session extension
message RefreshTokenRequest {
    string refresh_token = 1;                     // Current refresh token
    string device_id = 2;                         // Device identifier
}

// LogoutRequest for secure session termination
message LogoutRequest {
    string session_id = 1;                        // Session to terminate
    string device_id = 2;                         // Device identifier
    bool terminate_all = 3;                       // Terminate all sessions flag
}

// Enhanced AuthService with comprehensive security features
service AuthService {
    // Login authenticates user credentials with enhanced security
    rpc Login(LoginRequest) returns (LoginResponse) {
        option (rate_limit) = "10/minute";
        option (requires_ssl) = true;
    }

    // BiometricAuth handles biometric authentication
    rpc BiometricAuth(BiometricAuthRequest) returns (LoginResponse) {
        option (rate_limit) = "5/minute";
        option (requires_ssl) = true;
    }

    // ValidateToken validates and refreshes session tokens
    rpc ValidateToken(ValidateTokenRequest) returns (google.protobuf.Empty) {
        option (cache_ttl) = "1m";
        option (requires_ssl) = true;
    }

    // RefreshToken extends session validity
    rpc RefreshToken(RefreshTokenRequest) returns (LoginResponse) {
        option (rate_limit) = "30/hour";
        option (requires_ssl) = true;
    }

    // Logout terminates active sessions
    rpc Logout(LogoutRequest) returns (google.protobuf.Empty) {
        option (requires_ssl) = true;
    }
}