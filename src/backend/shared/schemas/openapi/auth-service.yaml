openapi: 3.0.0
info:
  title: FPBE Authentication Service API
  version: 1.0.0
  description: Authentication and KYC verification API endpoints for FPBE mobile banking
  contact:
    name: FPBE Development Team
    email: dev-team@fpbe.com

servers:
  - url: https://api.fpbe.com/v1
    description: Production server
  - url: https://staging-api.fpbe.com/v1
    description: Staging server

components:
  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
        - deviceId
        - deviceFingerprint
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 8
          example: "********"
        deviceId:
          type: string
          description: Unique device identifier
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        deviceFingerprint:
          type: object
          properties:
            deviceType:
              type: string
              example: "iPhone 12"
            deviceName:
              type: string
              example: "John's iPhone"
            osVersion:
              type: string
              example: "iOS 15.0"
        biometricData:
          type: string
          format: byte
          description: Encrypted biometric verification data

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          format: jwt
        refreshToken:
          type: string
          format: jwt
        expiresIn:
          type: integer
          example: 3600
        requiresTwoFactor:
          type: boolean
        kycStatus:
          type: string
          enum: [PENDING, IN_PROGRESS, VERIFIED, REJECTED, EXPIRED, REVIEW_REQUIRED]
        securityLevel:
          type: string
          enum: [HIGH, MEDIUM, LOW]
        deviceTrustScore:
          type: integer
          minimum: 0
          maximum: 100

    KYCRequest:
      type: object
      required:
        - documentType
        - documentNumber
        - documentImages
        - personalInfo
      properties:
        documentType:
          type: string
          enum: [PASSPORT, ID_CARD, DRIVERS_LICENSE]
        documentNumber:
          type: string
          example: "P123456789"
        documentImages:
          type: array
          items:
            type: string
            format: byte
          minItems: 1
          maxItems: 3
        personalInfo:
          type: object
          required:
            - firstName
            - lastName
            - dateOfBirth
            - nationality
            - address
          properties:
            firstName:
              type: string
              example: "John"
            lastName:
              type: string
              example: "Doe"
            dateOfBirth:
              type: string
              format: date
              example: "1990-01-01"
            nationality:
              type: string
              example: "US"
            address:
              type: object
              properties:
                street:
                  type: string
                city:
                  type: string
                country:
                  type: string
                postalCode:
                  type: string

    TwoFactorVerificationRequest:
      type: object
      required:
        - code
        - deviceId
      properties:
        code:
          type: string
          pattern: "^[0-9]{6}$"
          example: "123456"
        deviceId:
          type: string
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

paths:
  /auth/login:
    post:
      summary: Authenticate user
      description: Authenticate user with enhanced security controls
      operationId: login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Authentication failed
        '403':
          description: Account locked or device not trusted
        '429':
          description: Too many login attempts
      security: []
      x-rate-limit:
        rate: 5
        per: minute
        scope: "per IP and deviceId"

  /auth/verify-2fa:
    post:
      summary: Verify two-factor authentication code
      operationId: verifyTwoFactor
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwoFactorVerificationRequest'
      responses:
        '200':
          description: 2FA verification successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid 2FA code
        '429':
          description: Too many verification attempts
      security:
        - BearerAuth: []
      x-rate-limit:
        rate: 3
        per: minute
        scope: "per user"

  /auth/verify-kyc:
    post:
      summary: Submit KYC verification documents
      operationId: verifyKYC
      tags:
        - KYC
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/KYCRequest'
      responses:
        '202':
          description: KYC submission accepted
        '400':
          description: Invalid document format
        '401':
          description: Unauthorized
      security:
        - BearerAuth: []
      x-rate-limit:
        rate: 3
        per: day
        scope: "per user"

  /auth/refresh-token:
    post:
      summary: Refresh access token
      operationId: refreshToken
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  format: jwt
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid refresh token
      security: []
      x-rate-limit:
        rate: 10
        per: minute
        scope: "per user"

  /auth/logout:
    post:
      summary: Logout user and invalidate tokens
      operationId: logout
      tags:
        - Authentication
      responses:
        '200':
          description: Logout successful
        '401':
          description: Unauthorized
      security:
        - BearerAuth: []

security:
  - BearerAuth: []
  - ApiKeyAuth: []

tags:
  - name: Authentication
    description: Authentication related operations
  - name: KYC
    description: Know Your Customer verification operations