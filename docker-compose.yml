version: '3.8'

services:
  # Backend Node.js API Gateway
  backend-api:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
      args:
        SERVICE_TYPE: node
        SERVICE_NAME: api-gateway
    container_name: fpbe-backend-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - db
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - fpbe-net
    deploy:
      resources:
        limits:
          memory: 512M

  # Backend Java Account Service
  backend-account:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
      args:
        SERVICE_TYPE: java
        SERVICE_NAME: account-service
    container_name: fpbe-backend-account
    ports:
      - "8080:8080"
    restart: unless-stopped
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - fpbe-net
    deploy:
      resources:
        limits:
          memory: 512M

  # Backend Java Transaction Service
  backend-transaction:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
      args:
        SERVICE_TYPE: java
        SERVICE_NAME: transaction-service
    container_name: fpbe-backend-transaction
    ports:
      - "8081:8080"
    restart: unless-stopped
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - fpbe-net
    deploy:
      resources:
        limits:
          memory: 512M

  # PostgreSQL Database
  db:
    image: postgres:14
    container_name: fpbe-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: fpbe
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fpbe-net

  # Ethereum Microservice (Node.js)
  ethereum-sdk:
    build:
      context: ./services/ethereum
      dockerfile: Dockerfile
    container_name: fpbe-ethereum
    environment:
      - NODE_ENV=production
      - ETH_RPC_URL=${ETH_RPC_URL}
      - ETH_PRIVATE_KEY=${ETH_PRIVATE_KEY}
    restart: unless-stopped
    networks:
      - fpbe-net
    depends_on:
      - db
    security_opt:
      - no-new-privileges:true

  # Bitcoin Microservice (Node.js)
  bitcoin:
    build:
      context: ./services/bitcoin
      dockerfile: Dockerfile
    container_name: fpbe-bitcoin
    environment:
      - NODE_ENV=production
      - BTC_API_KEY=${BTC_API_KEY}
    restart: unless-stopped
    networks:
      - fpbe-net
    depends_on:
      - db
    security_opt:
      - no-new-privileges:true

  # Voice Banking Microservice (Node.js)
  voice-banking:
    build:
      context: ./services/voice-banking
      dockerfile: Dockerfile
    container_name: fpbe-voice-banking
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - fpbe-net
    depends_on:
      - db
    security_opt:
      - no-new-privileges:true

  # Frontend Metro bundler (for React Native development)
  frontend-dev:
    build:
      context: ./src/web
      dockerfile: Dockerfile
    container_name: fpbe-frontend-dev
    command: npm start
    volumes:
      - ./src/web:/app
    ports:
      - "8081:8081"
    stdin_open: true
    tty: true
    networks:
      - fpbe-net

  # (Optional) Frontend production server (e.g., Nginx/Node)
  # frontend-prod:
  #   build:
  #     context: ./src/web
  #     dockerfile: Dockerfile.prod
  #   container_name: fpbe-frontend-prod
  #   ports:
  #     - "80:80"
  #   networks:
  #     - fpbe-net
  #   restart: unless-stopped

volumes:
  postgres_data:

networks:
  fpbe-net:
    driver: bridge
