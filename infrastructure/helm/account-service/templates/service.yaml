apiVersion: v1
kind: Service
metadata:
  name: {{ include "account-service.fullname" . }}
  labels:
    {{- include "account-service.labels" . | nindent 4 }}
  annotations:
    # Prometheus metrics scraping configuration
    prometheus.io/scrape: "{{ .Values.metrics.enabled }}"
    prometheus.io/port: "{{ .Values.metrics.port }}"
    # AWS load balancer optimizations
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "60"
    # Performance optimization annotations
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "60"
spec:
  type: {{ .Values.service.type }}
  ports:
    # Main application port
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
    # Metrics port for Prometheus scraping
    - port: {{ .Values.metrics.port }}
      targetPort: metrics
      protocol: TCP
      name: metrics
  selector:
    {{- include "account-service.selectorLabels" . | nindent 4 }}
  # Session affinity configuration for consistent routing
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 3 hour session stickiness
  # Topology-aware routing configuration
  topologyKeys:
    - "kubernetes.io/hostname"      # Prefer same node
    - "topology.kubernetes.io/zone" # Then same zone
    - "*"                          # Fallback to any
  # Performance optimizations
  externalTrafficPolicy: Local     # Preserve client source IP
  publishNotReadyAddresses: false  # Only route to ready pods
  # Internal load balancing configuration
  internalTrafficPolicy: Cluster   # Enable cross-node routing