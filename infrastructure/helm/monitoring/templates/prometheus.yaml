{{/* Prometheus Server Helm Template for FPBE Mobile Banking System */}}
{{/* Version: 2.45.0 */}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: {{ .Values.global.namespace }}
  labels:
    app: prometheus
    component: server
data:
  prometheus.yml: |-
{{ .Files.Get "../../backend/shared/monitoring/prometheus/prometheus.yml" | indent 4 }}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: {{ .Values.global.namespace }}
  labels:
    app: prometheus
    component: server
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: {{ .Values.global.storageClass }}
  resources:
    requests:
      storage: {{ .Values.prometheus.storage.size | default "50Gi" }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-server
  namespace: {{ .Values.global.namespace }}
  labels:
    app: prometheus
    component: server
    version: v2.45.0
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  replicas: {{ .Values.prometheus.replicas | default 1 }}
  selector:
    matchLabels:
      app: prometheus
      component: server
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: prometheus
        component: server
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/prometheus-config.yaml") . | sha256sum }}
    spec:
      serviceAccountName: {{ .Values.global.serviceAccount }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
        - name: prometheus
          image: "prom/prometheus:v2.45.0"
          imagePullPolicy: IfNotPresent
          args:
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/prometheus
            - --storage.tsdb.retention.time=15d
            - --storage.tsdb.retention.size=50GB
            - --web.enable-lifecycle
            - --web.enable-admin-api
            - --web.enable-remote-write-receiver
            - --web.external-url=https://prometheus.fpbe.com
          ports:
            - name: http
              containerPort: 9090
              protocol: TCP
          resources:
            requests:
              cpu: {{ .Values.prometheus.resources.requests.cpu | default "500m" }}
              memory: {{ .Values.prometheus.resources.requests.memory | default "2Gi" }}
            limits:
              cpu: {{ .Values.prometheus.resources.limits.cpu | default "1000m" }}
              memory: {{ .Values.prometheus.resources.limits.memory | default "4Gi" }}
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus
              readOnly: true
            - name: storage
              mountPath: /prometheus
            - name: tls
              mountPath: /etc/prometheus/certs
              readOnly: true
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 30
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /-/ready
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 30
            failureThreshold: 3
      volumes:
        - name: config
          configMap:
            name: prometheus-config
        - name: storage
          persistentVolumeClaim:
            claimName: prometheus-storage
        - name: tls
          secret:
            secretName: prometheus-tls
            defaultMode: 0400
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - prometheus
                topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-server
  namespace: {{ .Values.global.namespace }}
  labels:
    app: prometheus
    component: server
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9090
      targetPort: http
      protocol: TCP
  selector:
    app: prometheus
    component: server

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: prometheus-server
  namespace: {{ .Values.global.namespace }}
spec:
  podSelector:
    matchLabels:
      app: prometheus
      component: server
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: grafana
        - podSelector:
            matchLabels:
              app: alertmanager
      ports:
        - protocol: TCP
          port: 9090
  egress:
    - to:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 9090
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 443

---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: prometheus-server
  namespace: {{ .Values.global.namespace }}
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'persistentVolumeClaim'
    - 'secret'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 65534
        max: 65534
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 65534
        max: 65534
  readOnlyRootFilesystem: true