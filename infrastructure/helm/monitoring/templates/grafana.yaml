{{/* Generate fullname for Grafana resources */}}
{{- define "grafana.fullname" -}}
{{- printf "%s-%s" .Release.Name "grafana" | trunc 63 | trimSuffix "-" -}}
{{- end -}}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ template "grafana.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: grafana
    component: monitoring
    part-of: fpbe-monitoring
    release: {{ .Release.Name }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "grafana.fullname" . }}-datasources
  namespace: {{ .Release.Namespace }}
  labels:
    app: grafana
    component: monitoring
data:
  datasources.yaml: |-
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus-server:9090
        access: proxy
        isDefault: true
        editable: false
        version: 1

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "grafana.fullname" . }}-dashboards
  namespace: {{ .Release.Namespace }}
  labels:
    app: grafana
    component: monitoring
data:
  dashboards.yaml: |-
    apiVersion: 1
    providers:
      - name: 'FPBE Dashboards'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: true
        editable: false
        options:
          path: /etc/grafana/provisioning/dashboards

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ template "grafana.fullname" . }}-storage
  namespace: {{ .Release.Namespace }}
  labels:
    app: grafana
    component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: {{ .Values.global.storageClass }}
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "grafana.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: grafana
    component: monitoring
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app: grafana

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "grafana.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: grafana
    component: monitoring
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      serviceAccountName: {{ template "grafana.fullname" . }}
      securityContext:
        fsGroup: 472
        runAsUser: 472
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - grafana
                topologyKey: kubernetes.io/hostname
      containers:
        - name: grafana
          image: "grafana/grafana:9.0.0"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "grafana.fullname" . }}-admin
                  key: admin-password
            - name: GF_AUTH_BASIC_ENABLED
              value: "true"
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "false"
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
              readOnly: true
            - name: grafana-dashboards
              mountPath: /etc/grafana/provisioning/dashboards
              readOnly: true
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 10
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: {{ template "grafana.fullname" . }}-storage
        - name: grafana-datasources
          configMap:
            name: {{ template "grafana.fullname" . }}-datasources
        - name: grafana-dashboards
          configMap:
            name: {{ template "grafana.fullname" . }}-dashboards

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ template "grafana.fullname" . }}-network-policy
  namespace: {{ .Release.Namespace }}
spec:
  podSelector:
    matchLabels:
      app: grafana
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: fpbe-monitoring
      ports:
        - protocol: TCP
          port: 3000
  egress:
    - to:
        - podSelector:
            matchLabels:
              app: prometheus
      ports:
        - protocol: TCP
          port: 9090