---
# Ansible playbook for deploying HA monitoring infrastructure
# Version: 1.0.0

- name: Setup HA Monitoring Infrastructure
  hosts: monitoring_servers
  become: true
  vars:
    monitoring_base_dir: "/opt/fpbe/monitoring"
    prometheus_version: "v2.45.0"
    grafana_version: "9.0.0"
    alertmanager_version: "0.25.0"
    ha_replica_count: 3
    retention_days: 30
    retention_size: "100GB"
    scrape_interval: "15s"
    evaluation_interval: "15s"
    backup_retention_days: 30
    tls_cert_path: "/etc/ssl/monitoring"
    failover_timeout: "5m"

  pre_tasks:
    - name: Create monitoring base directory
      ansible.builtin.file:
        path: "{{ monitoring_base_dir }}"
        state: directory
        mode: '0750'
        owner: prometheus
        group: prometheus

    - name: Generate TLS certificates
      community.crypto.openssl_certificate:
        path: "{{ tls_cert_path }}/monitoring.crt"
        privatekey_path: "{{ tls_cert_path }}/monitoring.key"
        provider: selfsigned
        selfsigned_digest: sha256
        subject_alt_name:
          - "DNS:prometheus.fpbe.com"
          - "DNS:grafana.fpbe.com"
          - "DNS:alertmanager.fpbe.com"

  roles:
    - role: monitoring
      vars:
        prometheus_config_template: prometheus-ha.yml.j2
        grafana_dashboards:
          - services.json
          - pi-mining.json
          - transactions.json
          - api-gateway.json
          - ha-status.json
        alertmanager_config: alertmanager-ha.yml.j2

  tasks:
    - name: Deploy HA Prometheus
      community.docker.docker_compose:
        project_name: prometheus-ha
        definition:
          version: '3.8'
          services:
            prometheus:
              image: "prom/prometheus:{{ prometheus_version }}"
              volumes:
                - "{{ monitoring_base_dir }}/prometheus/config:/etc/prometheus"
                - "{{ monitoring_base_dir }}/prometheus/data:/prometheus"
                - "{{ tls_cert_path }}:/etc/ssl/monitoring:ro"
              command:
                - '--config.file=/etc/prometheus/prometheus.yml'
                - '--storage.tsdb.retention.time={{ retention_days }}d'
                - '--storage.tsdb.retention.size={{ retention_size }}'
                - '--web.enable-lifecycle'
                - '--web.enable-admin-api'
                - '--cluster.listen-address=:9091'
              ports:
                - "9090:9090"
                - "9091:9091"
              deploy:
                replicas: "{{ ha_replica_count }}"
                update_config:
                  parallelism: 1
                  delay: 10s
                restart_policy:
                  condition: on-failure
              healthcheck:
                test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
                interval: 30s
                timeout: 10s
                retries: 3

    - name: Deploy HA Grafana
      community.docker.docker_compose:
        project_name: grafana-ha
        definition:
          version: '3.8'
          services:
            grafana:
              image: "grafana/grafana:{{ grafana_version }}"
              volumes:
                - "{{ monitoring_base_dir }}/grafana:/var/lib/grafana"
                - "{{ tls_cert_path }}:/etc/ssl/monitoring:ro"
              environment:
                GF_SERVER_PROTOCOL: https
                GF_SERVER_CERT_FILE: /etc/ssl/monitoring/monitoring.crt
                GF_SERVER_CERT_KEY: /etc/ssl/monitoring/monitoring.key
                GF_AUTH_BASIC_ENABLED: "false"
                GF_AUTH_OAUTH_ENABLED: "true"
                GF_HA_ENABLED: "true"
                GF_HA_MODE: cluster
              ports:
                - "3000:3000"
              deploy:
                replicas: "{{ ha_replica_count }}"
                update_config:
                  parallelism: 1
                  delay: 10s
                restart_policy:
                  condition: on-failure

    - name: Deploy HA AlertManager
      community.docker.docker_compose:
        project_name: alertmanager-ha
        definition:
          version: '3.8'
          services:
            alertmanager:
              image: "prom/alertmanager:{{ alertmanager_version }}"
              volumes:
                - "{{ monitoring_base_dir }}/alertmanager/config:/etc/alertmanager"
                - "{{ tls_cert_path }}:/etc/ssl/monitoring:ro"
              command:
                - '--config.file=/etc/alertmanager/alertmanager.yml'
                - '--cluster.listen-address=:9094'
                - '--cluster.peer=alertmanager:9094'
                - '--web.external-url=https://alertmanager.fpbe.com'
                - '--web.route-prefix=/'
              ports:
                - "9093:9093"
                - "9094:9094"
              deploy:
                replicas: "{{ ha_replica_count }}"
                update_config:
                  parallelism: 1
                  delay: 10s
                restart_policy:
                  condition: on-failure

  handlers:
    - name: Restart monitoring services
      community.docker.docker_compose:
        project_name: "{{ item }}"
        state: restarted
      loop:
        - prometheus-ha
        - grafana-ha
        - alertmanager-ha

  post_tasks:
    - name: Verify monitoring stack health
      ansible.builtin.uri:
        url: "{{ item.url }}"
        validate_certs: yes
        return_content: yes
        status_code: 200
      register: health_check
      until: health_check.status == 200
      retries: 6
      delay: 10
      loop:
        - { url: "https://prometheus.fpbe.com/-/healthy" }
        - { url: "https://grafana.fpbe.com/api/health" }
        - { url: "https://alertmanager.fpbe.com/-/healthy" }

    - name: Setup monitoring backup
      ansible.builtin.cron:
        name: "Monitoring backup"
        minute: "0"
        hour: "*/6"
        job: >
          docker run --rm
          -v {{ monitoring_base_dir }}/backups:/backups
          -v {{ monitoring_base_dir }}:/data
          alpine tar czf /backups/monitoring-$(date +\%Y\%m\%d-\%H\%M).tar.gz /data

    - name: Setup backup rotation
      ansible.builtin.cron:
        name: "Rotate monitoring backups"
        minute: "0"
        hour: "0"
        job: "find {{ monitoring_base_dir }}/backups -type f -mtime +{{ backup_retention_days }} -delete"