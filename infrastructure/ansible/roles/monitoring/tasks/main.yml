---
# Ansible tasks for deploying and configuring monitoring stack
# Version: 1.0.0

- name: Create monitoring directory structure
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0750'
    owner: prometheus
    group: prometheus
  loop:
    - "{{ monitoring_base_dir }}"
    - "{{ monitoring_base_dir }}/prometheus/data"
    - "{{ monitoring_base_dir }}/prometheus/config"
    - "{{ monitoring_base_dir }}/prometheus/rules"
    - "{{ monitoring_base_dir }}/grafana/provisioning"
    - "{{ monitoring_base_dir }}/grafana/dashboards"
    - "{{ monitoring_base_dir }}/alertmanager/config"
    - "{{ monitoring_base_dir }}/backups"

- name: Deploy Prometheus configuration
  ansible.builtin.template:
    src: prometheus.yml.j2
    dest: "{{ monitoring_base_dir }}/prometheus/config/prometheus.yml"
    mode: '0640'
    owner: prometheus
    group: prometheus
  notify: restart prometheus

- name: Deploy Prometheus service discovery configs
  ansible.builtin.template:
    src: "{{ item }}.yml.j2"
    dest: "{{ monitoring_base_dir }}/prometheus/config/{{ item }}.yml"
    mode: '0640'
    owner: prometheus
    group: prometheus
  loop:
    - service_alerts
    - pi_mining_alerts
  notify: restart prometheus

- name: Deploy Prometheus Docker Compose
  community.docker.docker_compose:
    project_name: prometheus
    definition:
      version: '3.8'
      services:
        prometheus:
          image: "prom/prometheus:{{ prometheus_version }}"
          volumes:
            - "{{ monitoring_base_dir }}/prometheus/config:/etc/prometheus"
            - "{{ monitoring_base_dir }}/prometheus/data:/prometheus"
          command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.retention.time={{ retention_days }}d'
            - '--storage.tsdb.retention.size={{ retention_size }}'
            - '--web.enable-lifecycle'
          ports:
            - "9090:9090"
          deploy:
            replicas: "{{ prometheus_replicas }}"
            update_config:
              parallelism: 1
              delay: 10s
            restart_policy:
              condition: on-failure
          healthcheck:
            test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
            interval: 30s
            timeout: 10s
            retries: 3

- name: Deploy Grafana Docker Compose
  community.docker.docker_compose:
    project_name: grafana
    definition:
      version: '3.8'
      services:
        grafana:
          image: "grafana/grafana:{{ grafana_version }}"
          volumes:
            - "{{ monitoring_base_dir }}/grafana:/var/lib/grafana"
          environment:
            GF_SECURITY_ADMIN_PASSWORD: "{{ grafana_admin_password }}"
            GF_SERVER_ROOT_URL: "https://grafana.fpbe.com"
            GF_AUTH_BASIC_ENABLED: "false"
            GF_AUTH_OAUTH_ENABLED: "true"
          ports:
            - "3000:3000"
          deploy:
            replicas: "{{ grafana_replicas }}"
            update_config:
              parallelism: 1
              delay: 10s
            restart_policy:
              condition: on-failure

- name: Deploy AlertManager Docker Compose
  community.docker.docker_compose:
    project_name: alertmanager
    definition:
      version: '3.8'
      services:
        alertmanager:
          image: "prom/alertmanager:{{ alertmanager_version }}"
          volumes:
            - "{{ monitoring_base_dir }}/alertmanager/config:/etc/alertmanager"
          command:
            - '--config.file=/etc/alertmanager/alertmanager.yml'
            - '--cluster.listen-address=:9094'
            - '--cluster.peer=alertmanager:9094'
          ports:
            - "9093:9093"
            - "9094:9094"
          deploy:
            replicas: "{{ alertmanager_replicas }}"
            update_config:
              parallelism: 1
              delay: 10s
            restart_policy:
              condition: on-failure

- name: Import Grafana dashboards
  ansible.builtin.template:
    src: "{{ item }}.json.j2"
    dest: "{{ monitoring_base_dir }}/grafana/dashboards/{{ item }}.json"
    mode: '0640'
    owner: grafana
    group: grafana
  loop:
    - services_dashboard
    - pi_mining_dashboard
  notify: reload grafana

- name: Configure Grafana datasources
  ansible.builtin.template:
    src: datasources.yml.j2
    dest: "{{ monitoring_base_dir }}/grafana/provisioning/datasources/prometheus.yml"
    mode: '0640'
    owner: grafana
    group: grafana
  notify: reload grafana

- name: Wait for Prometheus to be ready
  ansible.builtin.wait_for:
    host: localhost
    port: 9090
    timeout: 300
    state: started

- name: Wait for Grafana to be ready
  ansible.builtin.wait_for:
    host: localhost
    port: 3000
    timeout: 300
    state: started

- name: Wait for AlertManager to be ready
  ansible.builtin.wait_for:
    host: localhost
    port: 9093
    timeout: 300
    state: started

- name: Setup monitoring backup cron job
  ansible.builtin.cron:
    name: "Monitoring backup"
    minute: "0"
    hour: "*/6"
    job: >
      docker run --rm
      -v {{ monitoring_base_dir }}/backups:/backups
      -v {{ monitoring_base_dir }}:/data
      alpine tar czf /backups/monitoring-$(date +\%Y\%m\%d-\%H\%M).tar.gz /data

- name: Setup backup rotation
  ansible.builtin.cron:
    name: "Rotate monitoring backups"
    minute: "0"
    hour: "0"
    job: "find {{ monitoring_base_dir }}/backups -type f -mtime +7 -delete"

handlers:
  - name: restart prometheus
    community.docker.docker_compose:
      project_name: prometheus
      state: restarted

  - name: reload grafana
    community.docker.docker_compose:
      project_name: grafana
      state: restarted

  - name: restart alertmanager
    community.docker.docker_compose:
      project_name: alertmanager
      state: restarted